# -*- coding: utf-8 -*-
"""Stock Market Price Prediction using ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cY0aRDExp_q_vfwuYbWrmxTO4ZkY3Mn0

**Install important libararies for work**
"""

pip install numpy pandas matplotlib scikit-learn tensorflow flask

"""**Libraries Import**"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout

"""**Dataset upload **"""

# Load and preprocess the data
data = pd.read_csv('Google_train_data.csv')
data['Close'] = pd.to_numeric(data['Close'], errors='coerce')
data.dropna(inplace=True)

# Select the "Close" column
train_data = data.iloc[:, 4:5].values

"""**Scaling and Preparation of Training Data**"""

# Scale the data
scaler = MinMaxScaler(feature_range=(0, 1))
train_data_scaled = scaler.fit_transform(train_data)

# Prepare training data
X_train, y_train = [], []
timestep = 60
for i in range(timestep, len(train_data_scaled)):
    X_train.append(train_data_scaled[i-timestep:i, 0])
    y_train.append(train_data_scaled[i, 0])

X_train, y_train = np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

"""**Build LSTM MODEL**"""

# Build the LSTM model
model = Sequential()
model.add(LSTM(units=100, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(units=100, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=100, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=100, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(units=1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

"""**Training of model**"""

# Train the model
history = model.fit(X_train, y_train, epochs=20, batch_size=32, verbose=2)

# Plot training loss
plt.figure(figsize=(10, 6))
plt.plot(history.history['loss'], label='Training Loss')
plt.title('Model Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

"""**Loading and Preparing Test Data**"""

# Load test data
test_data = pd.read_csv('Google_test_data.csv')
test_data['Close'] = pd.to_numeric(test_data['Close'], errors='coerce')
test_data.dropna(inplace=True)

# Prepare test data
real_prices = test_data.iloc[:, 4:5].values
total_data = pd.concat((data['Close'], test_data['Close']), axis=0)
inputs = total_data[len(total_data) - len(test_data) - timestep:].values.reshape(-1, 1)
inputs = scaler.transform(inputs)

X_test = []
for i in range(timestep, len(inputs)):
    X_test.append(inputs[i-timestep:i, 0])

X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

"""**Prediction and Visualization**"""

# Predict stock prices
predicted_prices = model.predict(X_test)
predicted_prices = scaler.inverse_transform(predicted_prices)

# Visualization
plt.figure(figsize=(14, 7))
plt.plot(real_prices, color='red', label='Actual Google Stock Price')
plt.plot(predicted_prices, color='green', label='Predicted Google Stock Price')
plt.title('Google Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()

model.save('lstm_model.h5')